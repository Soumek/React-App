type Usuario{
    id:ID
    usuario:String
    email: String,
    rol:String
}
type VerifiedUsuario{
    usuario:String
    email:String
    rol:String
}
type Token{
    token:String!
}
type Cliente{
    id:ID
    usuarioid:String
    nombre: String
    apellido: String
    edad:Int
    rolcliente:String
}

type Empresa{
    id:ID
    clienteid:String,
    nombre:String
    tipo:String
    imagen:String
    productos:[Producto]

}
type MenuItemEmpresa{
    id:ID
    tipo:String
    icon:String
    condicion:Int
}
type Producto{
    id:ID
    idempresa:String
    nombre:String
    cantidad:String
    precio:String
    descuento:String
}
type SubRuta{
    id:ID
    path:String
    icon:String
    url:String
    condicion:Int
}
type Query{
    getUsuarios(limite:Int, offset:Int):[Usuario]
    getClientes:[Cliente]
    getEmpresas:[Empresa]
    getProducto:[Producto]
    obtenerUsuario:VerifiedUsuario
    getSubRutas:[SubRuta]
}

input UsuarioInput{
    id:ID
    usuario:String!
    password:String!
    email:String!,
    rol:String
}
input CrearClienteInput{
    id:ID
    usuarioid:String!
    nombre:String!
    apellido:String!
    edad:Int!
    rolcliente:String!
    
}
input ActualizarClienteInput{
    id:ID!
    usuarioid:String
    nombre:String!
    apellido:String!
    empresa:String
    edad:Int!
    rolcliente:String!
    
}
input EmpresaInput{
    id:ID
    clienteid:String!
    nombre:String!
    tipo:String!
    imagen:String!
    productos:[ProductoInput]
}
input RutaInput{
    nombre:String!
    subrutas:[SubRutaInput]
}
input SubRutaInput{
    id:ID
    nombre:String!
    path:String!
    icon:String!
    url:String!
    condicion:Int
}
input ActualizarEmpresaInput{
    id:ID
    nombre:String!
    tipo:String!
    imagen:String!
}
input ProductoInput{
    id:ID
    idempresa:String!
    nombre:String!
    cantidad:Int!
    precio:Float!
    descuento:Float!
}

input EliminarProductoInput{
    id:ID!
    idempresa:String!
}
type Mutation{
    crearUsuario(input:UsuarioInput): String
    autenticarUsuario(usuario:String!, password:String!): Token
    crearCliente(input:CrearClienteInput): Cliente
    actualizarCliente(input:ActualizarClienteInput):Cliente
    crearEmpresa(input:EmpresaInput): Empresa
    actualizarEmpresa(input:ActualizarEmpresaInput):Empresa
    eliminarEmpresa(id:ID! clienteid:String!):String
    crearProducto(input:ProductoInput): String
    actualizarProducto(input:ProductoInput): String
    eliminarProducto(input:EliminarProductoInput):String
    crearRuta(input:RutaInput):String
    crearSubRuta(input:SubRutaInput):String
    
    actualizarMenuItemEmpresa(input:SubRutaInput):String
    cambiarEstadoMenuItemEmpresa(condicion:Int!):String
    
}







# type Cliente{
#     id:ID
#     nombre: String
#     apellido: String
#     empresa: String
#     edad:Int
#     tipo: TipoCliente
#     emails: [Email]
#     pedidos:[Pedido]  
# }
# type Query{
#     getClientes(limite: Int, offset:Int): [Cliente]
#     getCliente(id: ID): Cliente
#     totalClientes:String
#     obtenerProductos(limite:Int, offset:Int):[Producto]
#     obtenerProducto(id:ID!):Producto
#     totalProductos:String
# }
# enum TipoCliente{
#     BASICO
#     PREMIUM
# }
# type Email{
#     email:String
# }
# type Pedido{
#     producto: String
#     precio: Int
# }
# type Producto{
#     id:ID
#     nombre:String
#     precio:Float
#     stock:Int
# }
# input EmailInput{
#     email:String
# }
# input PedidoInput{
#     producto: String
#     precio: Int
# }
# input ClienteInput {
#     id:ID
#     nombre: String!
#     apellido: String!
#     empresa: String!
#     edad:Int
#     tipo: TipoCliente!
#     emails:[EmailInput]
#     pedidos:[PedidoInput]   
# }
# input ProductoInput{
#     id:ID
#     nombre: String!
#     precio:Float!
#     stock:Int!
# }
# type Mutation{
#     crearCliente(input: ClienteInput): Cliente
#     actualizarCliente(input: ClienteInput): Cliente
#     eliminarCliente( id: ID!) : String
#     nuevoProducto(input:ProductoInput): Producto
#     actualizarProducto(input:ProductoInput):Producto
#     eliminarProducto(id:ID!):String
# }
